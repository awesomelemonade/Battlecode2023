on:
  workflow_dispatch:
  #pull_request:
  #  branches: [ master ]
  #push:
  #  branches:
  #    - master
name: Run Unit Tests

env:
  REPO_NAME: Battlecode2023
  REPO_PATH: Battlecode2023/rust/microtrainer
  EXECUTABLE_NAME: microtrainer
jobs:
  flamegraph:
    name: Flamegraph Profiling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v3
        with:
          path: ${{ env.REPO_NAME }}
      - name: Update
        run: sudo apt-get update
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --profile=release-with-debug --manifest-path ./${{ env.REPO_PATH }}/Cargo.toml
      - name: Install perf
        run: sudo apt install linux-tools-common linux-tools-generic linux-tools-`uname -r`
      - run: cargo install flamegraph
      - name: Configure for perf
        run: sudo sysctl -w kernel.perf_event_paranoid=1
      - run: sudo sh -c " echo 0 > /proc/sys/kernel/kptr_restrict"
      - name: Perf version
        run: perf --version
      - run: perf record -g --call-graph dwarf -o perf.data ./${{ env.REPO_PATH }}/target/release-with-debug/${{ env.EXECUTABLE_NAME }}
      - name: Archive perf
        uses: actions/upload-artifact@v2
        with:
          name: perf.data
          path: ./perf.data
          retention-days: 30
      - run: flamegraph -c "record -F 997 --call-graph dwarf,65528 -g" -o my_flamegraph.svg -- ./${{ env.REPO_PATH }}/target/release-with-debug/${{ env.EXECUTABLE_NAME }}
      - name: Archive flamegraph
        uses: actions/upload-artifact@v2
        with:
          name: my_flamegraph.svg
          path: ./my_flamegraph.svg
          retention-days: 30
  check-fmt-clippy:
    name: Check, Format, Clippy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./${{ env.REPO_PATH }}
    steps:
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v3
        with:
          path: ${{ env.REPO_NAME }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - run: cargo check
      - run: cargo fmt --all -- --check
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path ./${{ env.REPO_PATH }}/Cargo.toml -- -D warnings
          name: Clippy Output
  test:
    name: Run Unit Tests
    env:
      CARGO_INCREMENTAL: 0
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./${{ env.REPO_PATH }}
    steps:
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v3
        with:
          path: ${{ env.REPO_NAME }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
            path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
              ${{ env.REPO_PATH }}/target/
            key: ${{ runner.os }}-cargo-${{ hashfiles('**/Cargo.lock') }}
      - name: Install cargo2junit
        run: cargo install cargo2junit
        continue-on-error: true
      - name: cargo test & convert to junit
        run: cargo test -- -Z unstable-options --format json --report-time | cargo2junit > results.xml
      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: ./${{ env.REPO_NAME }}/results.xml
