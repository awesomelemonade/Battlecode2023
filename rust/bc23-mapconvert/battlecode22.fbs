namespace battlecode.schema;

/// A vector in two-dimensional space. Discrete space, of course.
/// Defaults to the 0 vector.
struct Vec {
    x: int = 0;
    y: int = 0;
}

/// A table of vectors.
table VecTable {
    xs: [int];
    ys: [int];
}

/// A table of RGB values.
table RGBTable {
    red: [int];
    green: [int];
    blue: [int];
}

/// The possible types of things that can exist.
/// Note that bullets are not treated as bodies.
enum BodyType : byte {
    // droids
    MINER,
    BUILDER,
    SOLDIER,
    SAGE,

    // buildings
    ARCHON,
    LABORATORY,
    WATCHTOWER
}

/// A list of new bodies to be placed on the map.
table SpawnedBodyTable {
    /// The numeric ID of the new bodies.
    /// Will never be negative.
    /// There will only be one body with a particular ID at a time.
    /// So, there will never be two robots with the same ID, or a robot and
    /// a building with the same ID.
    robotIDs: [int];
    /// The teams of the new bodies.
    teamIDs: [byte];
    /// The types of the new bodies.
    types: [BodyType];
    /// The locations of the bodies.
    locs: VecTable;
}

/// The map a round is played on.
table GameMap {
    /// The name of a map.
    name: string;
    /// The bottom corner of the map.
    minCorner: Vec;
    /// The top corner of the map.
    maxCorner: Vec;
    /// The map symmetry: 0 for rotation, 1 for horizontal, 2 for vertical.
    symmetry: int;
    /// The bodies on the map.
    bodies: SpawnedBodyTable;
    /// The random seed of the map.
    randomSeed: int;
    /// The rubble on the map.
    rubble: [int];
    /// The lead on the map.
    lead: [int];
    /// The anomalies scheduled: 0/1/2/3 abyss/charge/fury/vortex.
    anomalies: [int];
    /// The rounds the anomalies are scheduled for.
    anomalyRounds: [int];
}

/// Actions that can be performed.
/// Purely aesthetic; have no actual effect on simulation.
/// (Although the simulation may want to track the 'parents' of
/// particular robots.)
/// Actions may have 'targets', which are the units on which
/// the actions were performed.
enum Action : byte {
    /// Target: ID of robot attacked
    ATTACK,
    /// Target: ID of robot spawned
    SPAWN_UNIT,
    /// Target: location mined, x + y * width
    MINE_LEAD,
    /// Target: location mined, x + y * width
    MINE_GOLD,
    /// Target: none
    TRANSMUTE,
    /// Target: none
    TRANSFORM,
    /// Target: ID of robot mutated
    MUTATE,
    /// Target: ID of robot repaired
    REPAIR,
    /// Target: change in health (can be negative)
    CHANGE_HEALTH,
    /// When a PROTOTYPE building upgrades to TURRET
    /// Target: none
    FULLY_REPAIRED,
    /// Target: Sage location, x + y * width
    LOCAL_ABYSS,
    /// Target: Sage location, x + y * width
    LOCAL_CHARGE,
    /// Target: Sage location, x + y * width
    LOCAL_FURY,
    /// Target: none
    ABYSS,
    /// Target: none
    CHARGE,
    /// Target: none
    FURY,
    /// Target: 0 if 90 degrees clockwise, 1 if horizontal, 2 if vertical
    VORTEX,
    /// Dies due to an uncaught exception.
    /// Target: none
    DIE_EXCEPTION,
}

// Metadata

/// Metadata about all bodies of a particular type.
table BodyTypeMetadata {
    type: BodyType;
    buildCostLead: int;
    buildCostGold: int;
    level2CostLead: int;
    level2CostGold: int;
    level3CostLead: int;
    level3CostGold: int;
    actionCooldown: int;
    movementCooldown: int;
    health: int;
    level2Health: int;
    level3Health: int;
    damage: int;
    level2Damage: int;
    level3Damage: int;
    actionRadiusSquared: int;
    visionRadiusSquared: int;
    bytecodeLimit: int;
}

/// Data relevant to a particular team.
table TeamData {
    /// The name of the team.
    name: string;
    /// The java package the team uses.
    packageName: string;
    /// The ID of the team this data pertains to.
    teamID: byte;
}

// Profiler tables

/// These tables are set-up so that they match closely with speedscope's file format documented at
/// https://github.com/jlfwong/speedscope/wiki/Importing-from-custom-sources.
/// The client uses speedscope to show the recorded data in an interactive interface.

/// A single event in a profile. Represents either an open event (meaning a
/// method has been entered) or a close event (meaning the method was exited).
table ProfilerEvent {
    /// Whether this is an open event (true) or a close event (false).
    isOpen: bool;
    /// The bytecode counter at the time the event occurred.
    at: int;
    /// The index of the method name in the ProfilerFile.frames array.
    frame: int;
}

/// A profile contains all events and is labeled with a name.
table ProfilerProfile {
    /// The display-friendly name of the profile.
    name: string;
    /// The events that occurred in the profile.
    events: [ProfilerEvent];
}

/// A profiler file is a collection of profiles.
/// When profiling is enabled there is one of these per team per match.
table ProfilerFile {
    /// The method names that are referred to in the events.
    frames: [string];
    /// The recorded profiles, one per robot.
    profiles: [ProfilerProfile];
}

/// Events

/// An Event is a single step that needs to be processed.
/// A saved game simply consists of a long list of Events.
/// Events can be divided by either being sent separately (e.g. as separate
/// websocket messages), or by being wrapped with a GameWrapper.
/// A game consists of a series of matches; a match consists of a series of
/// rounds, and is played on a single map. Each round is a single simulation
/// step.
union Event {
    /// There should only be one GameHeader, at the start of the stream.
    GameHeader,
    /// There should be one MatchHeader at the start of each match.
    MatchHeader,
    /// A single simulation step. A round may be skipped if
    /// nothing happens during its time.
    Round,
    /// There should be one MatchFooter at the end of each simulation step.
    MatchFooter,
    /// There should only be one GameFooter, at the end of the stream.
    GameFooter
}

table Constants {
    // number of rounds for passive lead increase
    increasePeriod: int;
    // amounts of lead added every increasePeriod rounds
    leadAdditiveIncease: int;
}


/// The first event sent in the game. Contains all metadata about the game.
table GameHeader {
    /// The version of the spec this game complies with.
    specVersion: string;
    /// The teams participating in the game.
    teams: [TeamData];
    /// Information about all body types in the game.
    bodyTypeMetadata: [BodyTypeMetadata];
    
    //game constants
    constants: Constants;
}

/// The final event sent in the game.
table GameFooter {
    /// The ID of the winning team of the game.
    winner: byte;
}

/// Sent to start a match.
table MatchHeader {
    /// The map the match was played on.
    map: GameMap;
    /// The maximum number of rounds in this match.
    maxRounds: int;
}

/// Sent to end a match.
table MatchFooter {
    /// The ID of the winning team.
    winner: byte;
    /// The number of rounds played.
    totalRounds: int;
    /// Profiler data for team A and B if profiling is enabled.
    profilerFiles: [ProfilerFile];
}

/// A single time-step in a Game.
/// The bulk of the data in the file is stored in tables like this.
/// Note that a struct-of-arrays format is more space efficient than an array-
/// of-structs.
table Round {
    /// The IDs of teams in the Game.
    teamIDs: [int];

    /// The total amount of lead change of this team, this round
    teamLeadChanges: [int];
    /// The total amount of gold change of this team, this round
    teamGoldChanges: [int];

    /// The IDs of bodies that moved.
    movedIDs: [int];
    /// The new locations of bodies that have moved.
    movedLocs: VecTable;

    /// New bodies.
    spawnedBodies: SpawnedBodyTable;

    /// The IDs of bodies that died.
    diedIDs: [int];

    /// The IDs of robots that performed actions.
    /// IDs may repeat.
    actionIDs: [int];
    /// The actions performed. These actions allow us to track how much soup or dirt a body carries.
    actions: [Action];
    /// The 'targets' of the performed actions. Actions without targets may have any value
    actionTargets: [int];

    /// The locations of lead drops
    leadDropLocations: VecTable;
    /// The amount of lead dropped at each location
    leadDropValues: [int];

    /// The locations of gold drops
    goldDropLocations: VecTable;
    /// The amount of gold dropped at each location
    goldDropValues: [int];

    /// The IDs of the robots who changed their indicator strings
    indicatorStringIDs: [int];
    /// The messages of the robots who changed their indicator strings
    indicatorStrings: [string];

    /// The IDs of bodies that set indicator dots
    indicatorDotIDs: [int];
    /// The location of the indicator dots
    indicatorDotLocs: VecTable;
    /// The RGB values of the indicator dots
    indicatorDotRGBs: RGBTable;

    /// The IDs of bodies that set indicator lines
    indicatorLineIDs: [int];
    /// The start location of the indicator lines
    indicatorLineStartLocs: VecTable;
    /// The end location of the indicator lines
    indicatorLineEndLocs: VecTable;
    /// The RGB values of the indicator lines
    indicatorLineRGBs: RGBTable;

    // logs have been replaced with indicator strings

    /// The first sent Round in a match should have index 1. (The starting state,
    /// created by the MatchHeader, can be thought to have index 0.)
    /// It should increase by one for each following round.
    roundID: int;

    /// The IDs of player bodies.
    bytecodeIDs: [int];
    /// The bytecodes used by the player bodies.
    bytecodesUsed: [int];
}

/// Necessary due to flatbuffers requiring unions to be wrapped in tables.
table EventWrapper {
    e: Event;
}

/// If events are not otherwise delimited, this wrapper structure
/// allows a game to be stored in a single buffer.
/// The first event will be a GameHeader; the last event will be a GameFooter.
/// matchHeaders[0] is the index of the 0th match header in the event stream,
/// corresponding to matchFooters[0]. These indices allow quick traversal of
/// the file.
table GameWrapper {
    /// The series of events comprising the game.
    events: [EventWrapper];
    /// The indices of the headers of the matches, in order.
    matchHeaders: [int];
    /// The indices of the footers of the matches, in order.
    matchFooters: [int];
}
